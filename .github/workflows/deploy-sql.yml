name: Deploy SQL Database with Multi-Environment Workflow

on:
  workflow_dispatch:
  
jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: development  # Development environment
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install sqlcmd
      - name: Install sqlcmd
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo "/opt/mssql-tools/bin" >> $GITHUB_PATH

      # Deploy to development environment (your local machine)
      - name: Deploy to Development Environment
        env:
          SQL_SERVER: ${{ secrets.DEV_SQL_SERVER }}  # Your Pinggy URL
          SQL_USER: ${{ secrets.DEV_SQL_USER }}     # Auto_user
          SQL_PASSWORD: ${{ secrets.DEV_SQL_PASSWORD }}
        run: |
          echo "Deploying to Development: $SQL_SERVER"
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASSWORD" -i sql-scripts/setup.sql -l 60
          echo "Development deployment completed."

      # Verify deployment
      - name: Verify Development Deployment
        env:
          SQL_SERVER: ${{ secrets.DEV_SQL_SERVER }}
          SQL_USER: ${{ secrets.DEV_SQL_USER }}
          SQL_PASSWORD: ${{ secrets.DEV_SQL_PASSWORD }}
        run: |
          echo "Verifying development deployment..."
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASSWORD" -Q "SELECT * FROM AutoDBOngeziwe.dbo.user" -l 60
          echo "Development verification completed."

  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-dev  # Wait for dev deployment to complete
    environment: production  # Production environment with approval
    if: github.event_name == 'push'  # Only run on push events
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install sqlcmd
      - name: Install sqlcmd
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo "/opt/mssql-tools/bin" >> $GITHUB_PATH

      # Deploy to production environment (partner’s machine)
      - name: Deploy to Production Environment
        env:
          SQL_SERVER: ${{ secrets.PROD_SQL_SERVER }}  # Partner’s Pinggy URL
          SQL_USER: ${{ secrets.PROD_SQL_USER }}      # Auto_user on their machine
          SQL_PASSWORD: ${{ secrets.PROD_SQL_PASSWORD }}
        run: |
          echo "Deploying to Production: $SQL_SERVER"
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASSWORD" -i sql-scripts/setup.sql -l 60
          echo "Production deployment completed."

      # Verify production deployment
      - name: Verify Production Deployment
        env:
          SQL_SERVER: ${{ secrets.PROD_SQL_SERVER }}
          SQL_USER: ${{ secrets.PROD_SQL_USER }}
          SQL_PASSWORD: ${{ secrets.PROD_SQL_PASSWORD }}
        run: |
          echo "Verifying production deployment..."
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASSWORD" -Q "SELECT * FROM AutoDBOngeziwe.dbo.user" -l 60
          echo "Production verification completed."
