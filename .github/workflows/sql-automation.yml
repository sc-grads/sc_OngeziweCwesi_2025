name: Automate SQL Server Setup

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  setup-sql:
    runs-on: ubuntu-latest # Base OS for Docker compatibility
    container:
      image: mcr.microsoft.com/mssql-tools # Docker image with sqlcmd pre-installed
    steps:
      # Step 1: Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Start Pinggy tunnel (assuming it's running locally and URL is in SQL_SERVER secret)
      # Note: Since Pinggy is already running locally and exposed, we skip starting it here.
      # If it needs to be started in the pipeline, you'd need a local runner or a separate step.

      # Step 3: Install dependencies (sqlcmd is already in the container, but ensure connectivity)
      - name: Verify sqlcmd availability
        run: sqlcmd -?

      # Step 4: Create Database, Stored Procedure, and Insert Data
      - name: Setup Database and Table
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }} # Pinggy URL
          SQL_USER: ${{ secrets.SQL_USER }}     # Auto_user
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }} # Password
        run: |
          # Create the SQL script
          cat << 'EOF' > setup.sql
          USE master;
          GO
          
          -- Create the database if it doesn't exist
          IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'AutoTest')
          BEGIN
              CREATE DATABASE AutoTest;
          END
          GO
          
          USE AutoTest;
          GO
          
          -- Create the stored procedure
          IF OBJECT_ID('dbo.SetupUserTable', 'P') IS NOT NULL
              DROP PROCEDURE dbo.SetupUserTable;
          GO
          
          CREATE PROCEDURE dbo.SetupUserTable
          AS
          BEGIN
              -- Create the user table if it doesn't exist
              IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'user')
              BEGIN
                  CREATE TABLE [user] (
                      Name VARCHAR(50),
                      Surname VARCHAR(50),
                      Email VARCHAR(100)
                  );
              END
              
              -- Insert sample data
              INSERT INTO [user] (Name, Surname, Email)
              VALUES 
                  ('John', 'Doe', 'john.doe@example.com'),
                  ('Jane', 'Smith', 'jane.smith@example.com'),
                  ('Bob', 'Johnson', 'bob.johnson@example.com');
          END
          GO
          
          -- Execute the stored procedure
          EXEC dbo.SetupUserTable;
          GO
          EOF
          
          # Run the SQL script against the SQL Server
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASSWORD" -i setup.sql -d master

      # Step 5: Verify the setup (optional)
      - name: Verify Table Creation
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USER: ${{ secrets.SQL_USER }}
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        run: |
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASSWORD" -Q "USE AutoTest; SELECT * FROM [user];" -d AutoTest
