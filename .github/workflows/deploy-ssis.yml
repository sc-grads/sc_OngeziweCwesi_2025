name: Deploy Packages and Jobs
on:
  workflow_run:
    workflows: ["Initialize Timesheet DB"]
    types:
    - completed
  workflow_dispatch:
jobs:
  deploy-ssis-project:
    runs-on: [self-hosted, windows]
    if: github.event.workflow_run.conclusion == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Verify SSISDB Catalog
      env:
        SQL_SERVER: ${{ secrets.SQL_SERVER }}
        SQL_USERNAME: ${{ secrets.SQL_USER }}
        SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
      shell: powershell
      run: |
        Write-Host "Verifying SSISDB catalog..."
        Import-Module SqlServer -ErrorAction Stop

        $query = @"
        USE master;
        IF NOT EXISTS (SELECT 1 FROM sys.databases WHERE name = 'SSISDB')
        BEGIN
            RAISERROR ('SSISDB database does not exist', 16, 1);
        END
        "@

        Invoke-Sqlcmd -ServerInstance $env:SQL_SERVER -Username $env:SQL_USERNAME -Password $env:SQL_PASSWORD -Query $query -Encrypt Optional -TrustServerCertificate -ErrorAction Stop
        Write-Host "SSISDB catalog verified."
    - name: Deploy SSIS Project (.ispac)
      env:
        SQL_SERVER: ${{ secrets.SQL_SERVER }}
      shell: powershell
      run: |
        Write-Host "Deploying SSIS project..."

        $ispacPath = "HandsOnProjects/Timesheet/Packages/Integration Services Project2/bin/Development/Integration Services Project2.ispac"
        $deploymentWizard = "C:\Program Files (x86)\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe"

        # Debug: Verify paths
        Write-Host "Current Directory: $(Get-Location)"
        Write-Host "ISPAC Path: $ispacPath"
        Write-Host "Deployment Wizard Path: $deploymentWizard"

        # Verify ISDeploymentWizard.exe exists
        if (!(Test-Path $deploymentWizard)) {
            Write-Error "ISDeploymentWizard.exe not found at $deploymentWizard"
            exit 1
        }

        # Verify ISPAC file exists
        if (!(Test-Path $ispacPath)) {
            Write-Error "ISPAC file not found at $ispacPath"
            exit 1
        }

        # Define deployment arguments
        $deployArgs = @(
            "/Silent",
            "/SourcePath:`"$ispacPath`"",
            "/DestinationServer:`"$env:SQL_SERVER`"",
            "/DestinationPath:`"/SSISDB/Automation/Integration Services Project2`""
        )

        # Debug: Print arguments
        Write-Host "Deploy Arguments: $deployArgs"

        # Run Start-Process without backticks
        try {
            $process = Start-Process -FilePath "$deploymentWizard" -ArgumentList $deployArgs -Wait -PassThru -NoNewWindow -RedirectStandardOutput "deploy_output.txt" -RedirectStandardError "deploy_error.txt"
            Write-Host "Start-Process Exit Code: $($process.ExitCode)"
        } catch {
            Write-Error "Start-Process failed: $($_.Exception.Message)"
            exit 1
        }

        if ($process.ExitCode -ne 0) {
            Write-Error "Deployment failed with exit code $($process.ExitCode)"
            Get-Content deploy_error.txt
            exit $process.ExitCode
        }

        Write-Host "SSIS project deployed successfully."
        Get-Content deploy_output.txt
    - name: Create SQL Agent Jobs with Recurring Schedule
      env:
        SQL_SERVER: ${{ secrets.SQL_SERVER }}
        SQL_USERNAME: ${{ secrets.SQL_USER }}
        SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
      shell: powershell
      run: "Import-Module SqlServer -ErrorAction Stop\nWrite-Host \"Creating SQL Agent Jobs to run every 2 minutes...\"\n\n# Calculate start date and time in PowerShell\n$startDate = (Get-Date).ToString(\"yyyyMMdd\") # e.g., 20250619\n$startTime = (Get-Date).ToString(\"HHmmss\")   # e.g., 225100 for 10:51 PM\n\n$packages = @(\n    \"BillableTypePackage\",\n    \"ClientPackage\",\n    \"LeaveStaging\",\n    \"ConsultantPackage\",\n    \"Employee\",\n    \"DescriptionPackage\",\n    \"Package1\"\n)\n\nforeach ($pkg in $packages) {\n    $jobName = \"RunSSIS_${pkg}\"\n    $scheduleName = \"Every2Min_${pkg}\"\n\n    $jobScript = \n    @\"\n    USE msdb;\n\n    IF EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE name = '$jobName')\n    BEGIN\n        EXEC msdb.dbo.sp_delete_job @job_name = '$jobName';\n    END;\n\n    EXEC msdb.dbo.sp_add_job\n        @job_name = '$jobName',\n        @enabled = 1,\n        @owner_login_name = '$env:SQL_USERNAME';\n\n    EXEC msdb.dbo.sp_add_jobstep\n        @job_name = '$jobName',\n        @step_name = 'Run SSIS Package',\n        @subsystem = 'SSIS',\n        @command = '/ISSERVER \"SSISDB\\\\Automation\\\\Integration Services Project2\\\\$pkg.dtsx\" /SERVER \"$env:SQL_SERVER\"',\n        @on_success_action = 1,\n        @database_name = 'SSISDB';\n\n    DECLARE @schedule_id INT;\n    EXEC msdb.dbo.sp_add_schedule\n        @schedule_name = '$scheduleName',\n        @enabled = 1,\n        @freq_type = 4, -- Daily\n        @freq_interval = 1, -- Every day\n        @freq_subday_type = 4, -- Minutes\n        @freq_subday_interval = 2, -- Every 2 minutes\n        @active_start_date = $startDate,\n        @active_start_time = $startTime,\n        @schedule_id = @schedule_id OUTPUT;\n\n    EXEC msdb.dbo.sp_attach_schedule\n        @job_name = '$jobName',\n        @schedule_name = '$scheduleName';\n\n    EXEC msdb.dbo.sp_add_jobserver\n        @job_name = '$jobName';\n    \"@\n\n    try {\n        Invoke-Sqlcmd -ServerInstance $env:SQL_SERVER -Username $env:SQL_USERNAME -Password $env:SQL_PASSWORD -Query $jobScript -Encrypt Optional -TrustServerCertificate -ErrorAction Stop\n        Write-Host \"Created job $jobName to run every 2 minutes starting at $startTime on $startDate for package: ${pkg}\"\n    } catch {\n        Write-Error \"Failed to create job for package ${pkg}: $($_.Exception.Message)\"\n        exit 1\n    }\n}\n\nWrite-Host \"All SQL Agent jobs created with recurring 2-minute schedule.\""