name: SQL Deployment Template

# Inputs that the calling workflow will provide
inputs:
  sql_server:
    description: 'SQL Server address (e.g., Pinggy URL)'
    required: true
  sql_user:
    description: 'SQL Server username'
    required: true
  sql_password:
    description: 'SQL Server password'
    required: true
  database_name:
    description: 'Name of the database to deploy/verify'
    required: true
  environment_name:
    description: 'Name of the environment (e.g., development, production)'
    required: true

jobs:
  deploy-sql:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install sqlcmd with error handling
      - name: Install sqlcmd
        run: |
          echo "Installing sqlcmd for ${{ inputs.environment_name }}..."
          sudo apt-get update || { echo "Failed to update package list"; exit 1; }
          sudo apt-get install -y curl gnupg || { echo "Failed to install dependencies"; exit 1; }
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - || { echo "Failed to add Microsoft key"; exit 1; }
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list || { echo "Failed to add Microsoft repo"; exit 1; }
          sudo apt-get update || { echo "Failed to update after adding repo"; exit 1; }
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev || { echo "Failed to install mssql-tools"; exit 1; }
          echo "/opt/mssql-tools/bin" >> $GITHUB_PATH
          echo "sqlcmd installed successfully."

      # Deploy database with error handling
      - name: Deploy to ${{ inputs.environment_name }} Environment
        run: |
          echo "Deploying to ${{ inputs.environment_name }}: ${{ inputs.sql_server }}..."
          sqlcmd -S "${{ inputs.sql_server }}" -U "${{ inputs.sql_user }}" -P "${{ inputs.sql_password }}" -i sql-scripts/setup.sql -l 60 || { echo "Deployment failed for ${{ inputs.environment_name }}: Check SQL Server connection or script errors"; exit 1; }
          echo "${{ inputs.environment_name }} deployment completed."

      # Verify deployment with error handling
      - name: Verify ${{ inputs.environment_name }} Deployment
        run: |
          echo "Verifying ${{ inputs.environment_name }} deployment..."
          sqlcmd -S "${{ inputs.sql_server }}" -U "${{ inputs.sql_user }}" -P "${{ inputs.sql_password }}" -Q "USE ${{ inputs.database_name }}; SELECT * FROM [dbo].[user]" -l 60 || { echo "Verification failed for ${{ inputs.environment_name }}: Table 'user' may not exist or connection issue"; exit 1; }
          echo "${{ inputs.environment_name }} verification completed."
