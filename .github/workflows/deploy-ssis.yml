name: Deploy Packages and Jobs

on:
  workflow_run:
    workflows: ["Initialize Timesheet DB"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy-ssis-project:
    runs-on: [self-hosted, windows]
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify SSISDB Catalog
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USERNAME: ${{ secrets.SQL_USER }}
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        shell: powershell
        run: |
          Write-Host "Verifying SSISDB catalog..."
          Import-Module SqlServer -ErrorAction Stop

          $query = @"
          USE master;
          IF NOT EXISTS (SELECT 1 FROM sys.databases WHERE name = 'SSISDB')
          BEGIN
              RAISERROR ('SSISDB database does not exist', 16, 1);
          END
          "@

          Invoke-Sqlcmd -ServerInstance $env:SQL_SERVER -Username $env:SQL_USERNAME -Password $env:SQL_PASSWORD -Query $query -Encrypt Optional -TrustServerCertificate -ErrorAction Stop
          Write-Host "SSISDB catalog verified."

      - name: Deploy SSIS Project (.ispac)
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
        shell: powershell
        run: |
          Write-Host "Deploying SSIS project..."

          $ispacPath = "HandsOnProjects/Timesheet/Packages/Integration Services Project2/bin/Development/Integration Services Project2.ispac"
          $deploymentWizard = "C:\Program Files (x86)\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe"

          Write-Host "Current Directory: $(Get-Location)"
          Write-Host "ISPAC Path: $ispacPath"
          Write-Host "Deployment Wizard Path: $deploymentWizard"

          if (!(Test-Path $deploymentWizard)) {
              Write-Error "ISDeploymentWizard.exe not found at $deploymentWizard"
              exit 1
          }

          if (!(Test-Path $ispacPath)) {
              Write-Error "ISPAC file not found at $ispacPath"
              exit 1
          }

          $deployArgs = @(
              "/Silent",
              "/SourcePath=`"$ispacPath`"",
              "/DestinationServer=`"$env:SQL_SERVER`"",
              "/DestinationPath=`"/SSISDB/Automation/Integration Services Project2`""
          )

          Write-Host "Deploy Arguments: $deployArgs"

          try {
              $process = Start-Process -FilePath "$deploymentWizard" -ArgumentList $deployArgs -Wait -PassThru -NoNewWindow -RedirectStandardOutput "deploy_output.txt" -RedirectStandardError "deploy_error.txt"
              Write-Host "Start-Process Exit Code: $($process.ExitCode)"
          } catch {
              Write-Error "Start-Process failed: $($_.Exception.Message)"
              exit 1
          }

          if ($process.ExitCode -ne 0) {
              Write-Error "Deployment failed with exit code $($process.ExitCode)"
              Get-Content deploy_error.txt
              exit $process.ExitCode
          }

          Write-Host "SSIS project deployed successfully."
          Get-Content deploy_output.txt

      - name: Execute Deployed SSIS Packages
        env:
          SQL_SERVER: ${{ secrets.SQL_SERVER }}
          SQL_USERNAME: ${{ secrets.SQL_USER }}
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        shell: powershell
        run: |
          Write-Host "Executing SSIS packages..."

          $packages = @(
            "BillableTypePackage.dtsx",
            "ClientPackage.dtsx",
            "ConsultantPackage.dtsx",
            "DescriptionPackage.dtsx",
            "Employee.dtsx",
            "LeaveStaging.dtsx"
          )

          foreach ($package in $packages) {
            Write-Host "Starting execution for: $package"

            $query = "DECLARE @execution_id BIGINT;
            EXEC [SSISDB].[catalog].[create_execution]
              @package_name = N'$package',
              @execution_id = @execution_id OUTPUT,
              @folder_name = N'Automation',
              @project_name = N'Integration Services Project2',
              @use32bitruntime = False,
              @reference_id = NULL;

            EXEC [SSISDB].[catalog].[start_execution] @execution_id;"

            Invoke-Sqlcmd -ServerInstance $env:SQL_SERVER `
                          -Username $env:SQL_USERNAME `
                          -Password $env:SQL_PASSWORD `
                          -Query $query `
                          -Encrypt Optional `
                          -TrustServerCertificate `
                          -ErrorAction Stop

            Write-Host "Executed: $package"
          }

          Write-Host " All packages executed successfully."
